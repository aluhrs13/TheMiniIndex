@using MiniIndex.Models
@using MiniIndex.Core.Pagination
@using Anaximander.Linq

@model PaginatedList<Mini>

@{
    int pageRangeSize = 3;

    var pagesToLink = Enumerable.Range(1, Model.TotalPages)
        .Where(i => i <= pageRangeSize || Math.Abs(Model.PageIndex - i) <= pageRangeSize || Math.Abs(Model.TotalPages - i) < pageRangeSize)
        .Distinct()
        .OrderBy(x => x)
        .BoxWhile((a, b) => b - a == 1);
}

<div class="album py-5 bg-light">
    <div class="container">
        <div class="row">
            @foreach (var mini in Model)
            {
                <div class="col-md-4">
                    <div class="card mb-4 shadow-sm">
                        <a asp-page="./Details" asp-route-id="@mini.ID">
                            <img class="card-img-top" src="@mini.Thumbnail" width="314" height="236" />
                        </a>
                        <div class="card-body @mini.Status" align="center">
                            <p class="card-title">
                                @Html.DisplayFor(modelItem => mini.Name)

                                <small class="text-muted">
                                    <a href="/Creators/Details?id=@mini.Creator.ID">by @Html.DisplayFor(modelItem => mini.Creator.Name)</a>
                                </small>
                                @if (mini.Status == Status.Approved)
                                {

                                }
                                else if (mini.Status == Status.Pending)
                                {
                                <p><b>Pending admin approval</b></p>
                            }
                            else if (mini.Status == Status.Rejected)
                            {
                                <p><b>Rejected by admin</b></p>
                            }
                            </div>
                        </div>
                    </div>
                }
        </div>
    </div>
    <div>
        @foreach (var pageGroup in pagesToLink.Select((x, i) => (pages: x, groupIndex: i)))
        {
            if (pageGroup.groupIndex != 0)
            {
                <span> ... </span>
            }

            @foreach (var pageIndex in pageGroup.pages)
            {
                @if (pageIndex == Model.PageIndex)
                {
                    <span><b><u>@pageIndex</u></b></span>
                }
                else
                {
                    @Html.ActionLink(pageIndex.ToString(), "BrowseMinis", "Minis", new { pageSize = Model.PageSize, pageIndex }, new { @class = "btn" })
                }
            }
        }
    </div>
</div>